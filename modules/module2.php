<?php
    /*
        БУФЕРИЗАЦИЯ ВЫВОДА
    */
    print "<h3>Модуль 2</h3>";

    // Для ускорения и оптимизации работы существует такое понятие как "буферизация", проще говоря, это промежуток времени, когда программа спит и копит информацию, после чего целым пакетом отправляет эти данные на сервер. Важно: это не всегда удобно, нужно использовать буферизацию в зависимости от поставленной задачи
    // ---------------------------------------------------------------------------------------------------------------------------------------------------------
    for ($i = 1; $i < 6; $i++) { // <-- Таким образом записываются циклы в PHP
        echo "Строка ", $i, "<br>";
        sleep(1); // <-- Сервер как бы засыпает на 1 секунду, прежде чем загрузить страницу
    }
    echo "<br>";
    // ---------------------------------------------------------------------------------------------------------------------------------------------------------

    // Иногда может потребоваться сбросить данные из системного буфера. Для этого пригодится функция flush()
    // ---------------------------------------------------------------------------------------------------------------------------------------------------------
    for ($i = 1; $i < 6; $i++) {
        echo "Строка плавная...", $i, "<br>"; // <-- Конкретно в этом примере каждая строка будет выводиться пошагово, в отличие от предыдущего примера, т.к. в данном случае очищается системный буфер и данные сразу отправляются пользователю
        if (ob_get_level() > 0) ob_flush(); // <-- Вот и первое встретившееся условное выражение if...else, подобное есть почти во всех ЯП
        flush();
        sleep(1);
    }
    
    /* 
        Если предварительно включить неявный сброс данных из системного буфера с помощью функции ob_implicit_flush(), то вызывать каждый раз метод flush() не нужно. Сами браузеры также могут осуществлять буферизацию, так что кол-во отправляемых данных должно быть больше размера буфера браузера. По умолочанию размер буфера составляет 4096 байт, или 4 КБ. Недостающие пробелы заполняются, например, с помощью ф-ции str_pad()

        Вот список некоторых полезных функций, предназначенных для работы с буфером в PHP:
        1. ob_start() - включает буферизацию вывода. Каждый вызов этой функции создает новый уровень буфера. Если указано значение в директиве output_buffering, то ф-ция ob_start() первый раз вызывается автоматически.
        2. ob_get_level() - возвращает уровень вложенности или значение 0, если буферизация выключена
        3. ob_get_contents() - возвращает содержимое текущего буфера.
        4. ob_get_length() - возвращает количество байтов, содержащихся в текущем буфере
        5. ob_get_status([<true | false>]) - возвращает массив с информацией о статусе буфера верхнего уровня, если указано значение false или параметр не задан, или о статусе буферов всех уровней, если указано значение true
        6. ob_flush() - сбрасывает данные из текущего буфера
        7. ob_clean() - удаляет все данные из текущего буфера
        8. ob_end_clean() - удаляет все данные и отключает текущий буфер
        9. ob_get_clean() - возвращает содержимое текущего буфера, очищает его, а затем отключает буфер
        10. ob_end_flush() - сбрасывает данные из текущего буфера и отключает его
        11. ob_get_flush() - возвращает содержимое текущего буфера, сбрасывает данные, а затем отключает буфер.
    */
    
    // Операции с буфером
    // ---------------------------------------------------------------------------------------------------------------------------------------------------------
    echo ob_get_level(); // <-- данная строка выведет число 11, это значит, что буфер вложен 11 раз
    echo ob_get_contents(); // <-- данная строка ничего не выводит, т.к. все данные, которые были записаны в буфер до этой команды вывелись в браузер
    // ---------------------------------------------------------------------------------------------------------------------------------------------------------
?>